@page "/Account/Login"

<EditForm Model="LoginModel" method="post" OnValidSubmit="LoginAsync" FormName="Login" Enhance>
    <div class="card border-primary shadow-lg text-dark p-5" style="border-radius:24px; min-width:300px">
        <div class="card-header text-dark fs-4 border-primary"> Login </div>
        <div class="card-body" style="opacity:1"> 
             <DataAnnotationsValidator/>

             <div class="form-floating mb-3">
                 <InputText @bind-Value="LoginModel.Email" class="form-control" autocomplete="username" />
                 <label for="Email" class="form-label"> 
                     Email Address
                 </label>
             </div>

            <div class="form-floating mb-3">
                <InputText @bind-Value="LoginModel.Password" class="form-control" />
                <label for="Email" class="form-label">
                    User Password
                </label>
            </div>

            <div class="form-group align-content-end">
               <button class="float-end btn btn-success mt-4 w-50" type="submit" style="position:absolute">
                   Login
               </button>
            </div>

            <hr class="text-primary" />

        </div>
        <div class="card-footer mt-5">
            @if(@ErrorMessage != "")
            {
                <div class="alert alert-danger">
                    @ErrorMessage
                </div>
            }
            else
            {
                <ValidationSummary class="form-control text-danger text-decoration-none"/>
            }
        </div>
    </div>
</EditForm>

@code {

    string ErrorMessage = string.Empty;

    public bool IsBusy { get; set; } = false;

    [SupplyParameterFromForm]
    private LoginUserRequestDTO LoginModel { get; set; } = new();

    private async Task LoginAsync()
    {
        if (IsBusy) return;
        ErrorMessage=string.Empty;
        IsBusy =true;
        var response = await accountService.LoginAsync(LoginModel);

        if(!response.Flag)
        {
            IsBusy = false;
            ErrorMessage = response.Message;
            return;
        }
        IsBusy = true;
        NavManager.NavigateTo(uri: "app/home", true);
    }

    [CascadingParameter]
    public Task<AuthenticationState>? ClientAuthState{ get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if ((await ClientAuthState!).User.Identity!.IsAuthenticated == true)
            {
                NavManager.NavigateTo("app/home", false, true);
            }
        }
        catch (Exception)
        {
            
            throw;
        }
    }

}
